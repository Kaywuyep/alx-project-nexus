"""
Django settings for mart_africa project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
import dj_database_url
import cloudinary
import cloudinary.uploader
import cloudinary.api
from datetime import timedelta
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Configure logging to see what's happening with uploads
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ot5x&g1va-&8wp9^0ga2!ag6^qap1!7g%vfu$t_y*pw2zsej4m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=300),  # or whatever you want
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    # other settings...
}

# ALLOWED_HOSTS = []
# allow all origins (not recommended for production)
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    # 'drf_yasg',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_spectacular',
    'cloudinary_storage',
    'cloudinary',

    # Local apps
    'users',
    'products',
    'orders',
    'reviews',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS_ALLOWED_ORIGINS = [
#     "https://your-react-app.onrender.com",  # your deployed React frontend
#     "http://localhost:3000",  # for local development
# ]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://martafrica.onrender.com",
]
CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'alx_project_nexus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'alx_project_nexus.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# Database
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': config("DB_NAME"),
    #     'USER': config("DB_USER"),
    #     'PASSWORD': config('DB_PASSWORD'),
    #     'HOST': config('DB_HOST', default="127.0.0.1"),
    #     'PORT': config('DB_PORT', default="5432"),
    # },
    'default': dj_database_url.config(default=config("DATABASE_URL"))
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'ALX PROJECT NEXUS API',
    'DESCRIPTION': 'API documentation for Alx Project Nexus',
    'VERSION': '1.0.0',
    # optionally:
    'SERVE_INCLUDE_SCHEMA': False,
}


AUTH_USER_MODEL = 'users.User'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# ================================
# CLOUDINARY CONFIGURATION
# ================================

# Simple and direct configuration using individual variables (most reliable)
try:
    # Get individual variables from .env
    cloud_name = config('CLOUDINARY_CLOUD_NAME', default=None)
    api_key = config('CLOUDINARY_API_KEY', default=None)
    api_secret = config('CLOUDINARY_API_SECRET', default=None)
    
    logger.info(f"üîç Found credentials - Cloud: {bool(cloud_name)}, Key: {bool(api_key)}, Secret: {bool(api_secret)}")
    
    if all([cloud_name, api_key, api_secret]):
        # Configure Cloudinary directly
        cloudinary.config(
            secure=True,
            cloud_name=cloud_name,
            api_key=api_key,
            api_secret=api_secret,
        )
        logger.info("‚úÖ Cloudinary configured successfully!")
        logger.info(f"üîó Cloud name: {cloud_name}")
        logger.info(f"üîë API Key: {api_key[:6]}...")
        
    else:
        missing = []
        if not cloud_name: missing.append('CLOUDINARY_CLOUD_NAME')
        if not api_key: missing.append('CLOUDINARY_API_KEY') 
        if not api_secret: missing.append('CLOUDINARY_API_SECRET')
        
        logger.error(f"‚ùå Missing Cloudinary variables: {', '.join(missing)}")
        logger.error("üí° Please check your .env file")
        raise Exception(f"Missing required Cloudinary variables: {missing}")
        
except Exception as e:
    logger.error(f"‚ùå Cloudinary configuration failed: {e}")
    # Set minimal config to prevent crashes
    cloudinary.config(secure=True)

# Cloudinary Storage Settings
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config('CLOUDINARY_CLOUD_NAME', default=''),
    'API_KEY': config('CLOUDINARY_API_KEY', default=''),
    'API_SECRET': config('CLOUDINARY_API_SECRET', default=''),
}

# Set Cloudinary as the default file storage
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# ================================
# LOGGING CONFIGURATION
# ================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'cloudinary': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'products.views': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ================================
# ENVIRONMENT-SPECIFIC SETTINGS
# ================================


# Test Cloudinary connection on startup
def test_cloudinary_connection():
    """Test if Cloudinary is properly configured"""
    try:
        # Try to get account details
        result = cloudinary.api.ping()
        if result.get('status') == 'ok':
            logger.info("üéâ Cloudinary connection successful!")
            return True
        else:
            logger.warning("‚ö†Ô∏è Cloudinary ping returned unexpected status")
            return False
    except Exception as e:
        logger.error(f"‚ùå Cloudinary connection test failed: {e}")
        return False
